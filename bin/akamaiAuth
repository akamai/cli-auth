#!/usr/bin/env node

// Copyright 2018 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Kirsten Hunter <khunter@akamai.com>
 */

let untildify = require('untildify');
let CliAuth = require('../index').CliAuth;
const chalk = require('chalk');
const consoleLabel = 'akamai auth';

function errorMessage(error, context) {
  return context.cliMessage(chalk.red.bold('\nERROR: \n\t') + error.message + '\n');
}

function main() {
  process.argv[1] = 'akamai auth';
  return require('sywac')
    .file('--config <config>', {
      desc: 'Config file',
      defaultValue: untildify('~/.edgerc'),
    })
    .string('--section <section>', {
      desc: 'Section for config file',
      defaultValue: 'default',
    })
    .string('--from <from>', {
      desc: 'Section to copy from',
      group: 'Copy options:',
    })
    .string('--to <to>', {
      desc: 'Section to copy to',
      group: 'Copy options:',
    })
    .boolean('--overwrite', {
      desc: 'Replace current credentials',
      group: 'Import options:',
    })
    .command('setup', {
      desc: 'Setup authentication for Akamai',
      run: (options, context) => {
        try {
          let app = new CliAuth(options);
          return app.setup(options);
        } catch (error) {
          return errorMessage(error, context);
        }
      },
    })
    .command('verify', {
      desc: 'Verify existing credentials',
      run: (options, context) => {
        try {
          let app = new CliAuth(options);
          return app.verify(options);
        } catch (error) {
          return errorMessage(error, context);
        }
      },
    })
    .command('import', {
      desc: 'Paste in a formatted credential block',
      run: (options, context) => {
        try {
          let app = new CliAuth(options);
          return app.paste(options);
        } catch (error) {
          return errorMessage(error, context);
        }
      },
    })
    .command('copy', {
      desc: 'Copy credentials from one section to a new one',
      paramsDesc: ['Section to copy from', 'Section to copy to'],
      run: (options, context) => {
        try {
          let app = new CliAuth(options);
          return app.copy(options);
        } catch (error) {
          return errorMessage(error, context);
        }
      },
    })
    .showHelpByDefault()
    .help('--help', {group: 'Command options:'})
    .version('--version', {group: 'Command options:'})
    .epilogue('Copyright (C) Akamai Technologies, Inc\nVisit http://github.com/akamai/cli-auth for detailed documentation\n')
    .style({
      // you can style several other things too
      // and even style things differently when validation fails for them
      // see http://sywac.io/docs/sync-config.html#style
      group: str => chalk.blue.bold(str),
    })
    .style({
      group: str => chalk.bold.blue(str === 'Options:' ? 'General options:' : str),
    })
    .outputSettings({maxWidth: 90})
    .parse()
    .then((result, context) => {
      // let errors bubble up
      if (result.errors.length) {
        console.error(chalk.red.bold('\nERROR: \n\t'), result.errors[0].message, '\n');
      } else if (result.output) {
        console.log(result.output);
        process.exit(result.code);
      }
    });
}

console.time(consoleLabel);
const begin = Date.now();

main().then(options => {
  const end = Date.now();
  const timeSpent = ((end - begin) / 1000 / 60).toPrecision(2) + ' mins';
});
